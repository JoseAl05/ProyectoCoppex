{"version":3,"file":"mat-select-country.component.d.ts","sources":["mat-select-country.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { MatAutocomplete, MatAutocompleteSelectedEvent, MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n/**\n * Country interface ISO 3166\n */\nexport interface Country {\n    name: string;\n    alpha2Code: string;\n    alpha3Code: string;\n    numericCode: string;\n}\n/**\n * @author Anthony Nahas\n * @since 11.19\n * @version 2.1.0\n */\nexport declare class MatSelectCountryComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\n    i18n: string;\n    appearance: MatFormFieldAppearance;\n    countries: Country[];\n    label: string;\n    placeHolder: string;\n    required: boolean;\n    disabled: boolean;\n    nullable: boolean;\n    readonly: boolean;\n    class: string;\n    itemsLoadSize: number;\n    loading: boolean;\n    statesAutocompleteRef: MatAutocomplete;\n    autocompleteTrigger: MatAutocompleteTrigger;\n    onCountrySelected: EventEmitter<Country>;\n    filteredOptions: Country[];\n    db: Country[];\n    loadingDB: boolean;\n    debounceTime: number;\n    filterString: string;\n    private modelChanged;\n    private subscription;\n    private _value;\n    constructor(i18n: string);\n    get value(): Country;\n    set value(value: Country);\n    propagateChange: (_: any) => void;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    onBlur(): void;\n    onOptionsSelected($event: MatAutocompleteSelectedEvent): void;\n    writeValue(obj: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState?(isDisabled: boolean): void;\n    autocompleteScroll(): void;\n    inputChanged(value: string): void;\n    ngOnDestroy(): void;\n    private _importLang;\n    private _filter;\n}\n"]}